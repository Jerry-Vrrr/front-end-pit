{"ast":null,"code":"var _jsxFileName = \"/Users/jerryvohrer/bespoke-work/front-end-pit/frontend/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authToken, setAuthToken] = useState(localStorage.getItem(\"sessionToken\") || null);\n  const [user, setUser] = useState(null); // Store user data\n\n  const login = (token, role, companyId) => {\n    setAuthToken(token);\n    localStorage.setItem(\"sessionToken\", token);\n    setUser({\n      role,\n      companyId\n    }); // Store user data\n  };\n  const logout = () => {\n    setAuthToken(null);\n    localStorage.removeItem(\"sessionToken\");\n    setUser(null); // Clear user data\n  };\n\n  // Check if there's a valid session token on refresh\n  useEffect(() => {\n    const checkExistingSession = async () => {\n      if (authToken) {\n        try {\n          const response = await axios.get(\"http://localhost:3000/check_session\", {\n            headers: {\n              \"x-session-token\": authToken\n            }\n          });\n          const userData = response.data.user;\n          if (userData) {\n            const {\n              role,\n              logged_company_id\n            } = userData;\n            setUser({\n              role,\n              companyId: logged_company_id\n            }); // Restore user data\n          } else {\n            logout(); // Clear session if no valid user data\n          }\n        } catch (error) {\n          console.error(\"Error checking session:\", error);\n          logout(); // Clear session on error\n        }\n      }\n    };\n    checkExistingSession();\n  }, [authToken]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authToken,\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"1EGJWMKCaX5EytzTWMiB6lnQ4Tc=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authToken","setAuthToken","localStorage","getItem","user","setUser","login","token","role","companyId","setItem","logout","removeItem","checkExistingSession","response","get","headers","userData","data","logged_company_id","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jerryvohrer/bespoke-work/front-end-pit/frontend/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [authToken, setAuthToken] = useState(localStorage.getItem(\"sessionToken\") || null);\n  const [user, setUser] = useState(null); // Store user data\n\n  const login = (token, role, companyId) => {\n    setAuthToken(token);\n    localStorage.setItem(\"sessionToken\", token);\n    setUser({ role, companyId }); // Store user data\n  };\n\n  const logout = () => {\n    setAuthToken(null);\n    localStorage.removeItem(\"sessionToken\");\n    setUser(null); // Clear user data\n  };\n\n  // Check if there's a valid session token on refresh\n  useEffect(() => {\n    const checkExistingSession = async () => {\n      if (authToken) {\n        try {\n          const response = await axios.get(\"http://localhost:3000/check_session\", {\n            headers: { \"x-session-token\": authToken }\n          });\n          const userData = response.data.user;\n\n          if (userData) {\n            const { role, logged_company_id } = userData;\n            setUser({ role, companyId: logged_company_id }); // Restore user data\n          } else {\n            logout(); // Clear session if no valid user data\n          }\n        } catch (error) {\n          console.error(\"Error checking session:\", error);\n          logout(); // Clear session on error\n        }\n      }\n    };\n\n    checkExistingSession();\n  }, [authToken]);\n\n  return (\n    <AuthContext.Provider value={{ authToken, user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAACW,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC;EACxF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExC,MAAMe,KAAK,GAAGA,CAACC,KAAK,EAAEC,IAAI,EAAEC,SAAS,KAAK;IACxCR,YAAY,CAACM,KAAK,CAAC;IACnBL,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,KAAK,CAAC;IAC3CF,OAAO,CAAC;MAAEG,IAAI;MAAEC;IAAU,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBV,YAAY,CAAC,IAAI,CAAC;IAClBC,YAAY,CAACU,UAAU,CAAC,cAAc,CAAC;IACvCP,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACd,MAAMqB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAIb,SAAS,EAAE;QACb,IAAI;UACF,MAAMc,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,qCAAqC,EAAE;YACtEC,OAAO,EAAE;cAAE,iBAAiB,EAAEhB;YAAU;UAC1C,CAAC,CAAC;UACF,MAAMiB,QAAQ,GAAGH,QAAQ,CAACI,IAAI,CAACd,IAAI;UAEnC,IAAIa,QAAQ,EAAE;YACZ,MAAM;cAAET,IAAI;cAAEW;YAAkB,CAAC,GAAGF,QAAQ;YAC5CZ,OAAO,CAAC;cAAEG,IAAI;cAAEC,SAAS,EAAEU;YAAkB,CAAC,CAAC,CAAC,CAAC;UACnD,CAAC,MAAM;YACLR,MAAM,CAAC,CAAC,CAAC,CAAC;UACZ;QACF,CAAC,CAAC,OAAOS,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/CT,MAAM,CAAC,CAAC,CAAC,CAAC;QACZ;MACF;IACF,CAAC;IAEDE,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACb,SAAS,CAAC,CAAC;EAEf,oBACEL,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,SAAS;MAAEI,IAAI;MAAEE,KAAK;MAAEK;IAAO,CAAE;IAAAb,QAAA,EAC7DA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC5B,EAAA,CA/CWF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAiDzB,eAAeD,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}