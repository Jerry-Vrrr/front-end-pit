{"ast":null,"code":"var _jsxFileName = \"/Users/jerryvohrer/bespoke-work/front-end-pit/frontend/frontend/src/context/CompanyContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COMPANY_MAPPING = {\n  \"475663645\": \"Apricot\",\n  \"432770919\": \"Brock\",\n  \"754688700\": \"Brown Chiari\",\n  \"707808192\": \"Conger\",\n  \"196651924\": \"CPJ\",\n  \"408997789\": \"Crowell\",\n  \"788957891\": \"Greenstein Pittari\",\n  \"435195417\": \"Greenberg\",\n  \"294642214\": \"KLAW\",\n  \"533921350\": \"Kohan Bablove\",\n  \"316384868\": \"Lewis\",\n  \"612344072\": \"Lopez Humphries\",\n  \"595022144\": \"Mahoney\",\n  \"258732157\": \"Money\",\n  \"427975086\": \"Rozas\",\n  \"847306783\": \"Trust\"\n};\nexport const CompanyContext = /*#__PURE__*/createContext();\nexport const CompanyProvider = ({\n  children\n}) => {\n  _s();\n  const [totalCalls, setTotalCalls] = useState({});\n  const [callsLast24Hours, setCallsLast24Hours] = useState({});\n  const [trend24Hours, setTrend24Hours] = useState({});\n  const [trend30Days, setTrend30Days] = useState({});\n  const [entriesLast24Hours, setEntriesLast24Hours] = useState({}); // State to store entries count\n  const [gravityFormEntries, setGravityFormEntries] = useState([]); // State to store all Gravity Form entries\n\n  const fetchCallData = async () => {\n    try {\n      const allCallsData = {};\n      for (const companyId in COMPANY_MAPPING) {\n        const response = await axios.get(`http://localhost:3000/api/v1/call_rail_data?company_id=${companyId}`);\n        const calls = response.data;\n\n        // Filter calls from the last 30 days\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        const recentCalls = calls.filter(call => new Date(call.start_time) >= thirtyDaysAgo);\n        allCallsData[companyId] = {\n          total: recentCalls.length,\n          calls: recentCalls\n        };\n\n        // Filter calls from the last 24 hours\n        const twentyFourHoursAgo = new Date();\n        twentyFourHoursAgo.setDate(twentyFourHoursAgo.getDate() - 1);\n        const recent24HourCalls = calls.filter(call => new Date(call.start_time) >= twentyFourHoursAgo);\n        setCallsLast24Hours(prev => ({\n          ...prev,\n          [companyId]: recent24HourCalls.length\n        }));\n\n        // Calculate trends\n        const previous30DaysAgo = new Date();\n        previous30DaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        const previous30DaysCalls = calls.filter(call => new Date(call.start_time) >= previous30DaysAgo && new Date(call.start_time) < thirtyDaysAgo);\n        const previous30DaysCount = previous30DaysCalls.length;\n        setTrend30Days(prev => ({\n          ...prev,\n          [companyId]: recentCalls.length > previous30DaysCount ? 'up' : 'down'\n        }));\n        const previous24HoursAgo = new Date();\n        previous24HoursAgo.setDate(twentyFourHoursAgo.getDate() - 1);\n        const previous24HoursCalls = calls.filter(call => new Date(call.start_time) >= previous24HoursAgo && new Date(call.start_time) < twentyFourHoursAgo);\n        const previous24HoursCount = previous24HoursCalls.length;\n        setTrend24Hours(prev => ({\n          ...prev,\n          [companyId]: recent24HourCalls.length > previous24HoursCount ? 'up' : 'down'\n        }));\n      }\n      setTotalCalls(allCallsData);\n    } catch (error) {\n      console.error('Error fetching the call data:', error);\n    }\n  };\n  const fetchGravityFormsData = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/api/v1/gravity_forms/entries');\n      const entries = response.data;\n\n      // Process entries to count the number of new chats for each company in the last 24 hours\n      const twentyFourHoursAgo = new Date();\n      twentyFourHoursAgo.setDate(twentyFourHoursAgo.getDate() - 1);\n      const newEntries = {};\n      entries.forEach(entry => {\n        const companyId = entry.company_id; // Ensure this matches the attribute name in your entries\n        if (new Date(entry.date_created) >= twentyFourHoursAgo) {\n          if (!newEntries[companyId]) {\n            newEntries[companyId] = 0;\n          }\n          newEntries[companyId]++;\n        }\n      });\n      setEntriesLast24Hours(newEntries);\n      setGravityFormEntries(entries); // Store all entries in state\n    } catch (error) {\n      console.error('Error fetching Gravity Forms data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchCallData();\n    fetchGravityFormsData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CompanyContext.Provider, {\n    value: {\n      COMPANY_MAPPING,\n      totalCalls,\n      callsLast24Hours,\n      trend24Hours,\n      trend30Days,\n      setTrend24Hours,\n      setTrend30Days,\n      entriesLast24Hours,\n      gravityFormEntries // Provide the entries to the context\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(CompanyProvider, \"1RXic0BJbonOqSGkNWjfY2zydnw=\");\n_c = CompanyProvider;\nvar _c;\n$RefreshReg$(_c, \"CompanyProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","COMPANY_MAPPING","CompanyContext","CompanyProvider","children","_s","totalCalls","setTotalCalls","callsLast24Hours","setCallsLast24Hours","trend24Hours","setTrend24Hours","trend30Days","setTrend30Days","entriesLast24Hours","setEntriesLast24Hours","gravityFormEntries","setGravityFormEntries","fetchCallData","allCallsData","companyId","response","get","calls","data","thirtyDaysAgo","Date","setDate","getDate","recentCalls","filter","call","start_time","total","length","twentyFourHoursAgo","recent24HourCalls","prev","previous30DaysAgo","previous30DaysCalls","previous30DaysCount","previous24HoursAgo","previous24HoursCalls","previous24HoursCount","error","console","fetchGravityFormsData","entries","newEntries","forEach","entry","company_id","date_created","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jerryvohrer/bespoke-work/front-end-pit/frontend/frontend/src/context/CompanyContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst COMPANY_MAPPING = {\n  \"475663645\": \"Apricot\",\n  \"432770919\": \"Brock\",\n  \"754688700\": \"Brown Chiari\",\n  \"707808192\": \"Conger\",\n  \"196651924\": \"CPJ\",\n  \"408997789\": \"Crowell\",\n  \"788957891\": \"Greenstein Pittari\",\n  \"435195417\": \"Greenberg\",\n  \"294642214\": \"KLAW\",\n  \"533921350\": \"Kohan Bablove\",\n  \"316384868\": \"Lewis\",\n  \"612344072\": \"Lopez Humphries\",\n  \"595022144\": \"Mahoney\",\n  \"258732157\": \"Money\",\n  \"427975086\": \"Rozas\",\n  \"847306783\": \"Trust\"\n};\n\nexport const CompanyContext = createContext();\n\nexport const CompanyProvider = ({ children }) => {\n  const [totalCalls, setTotalCalls] = useState({});\n  const [callsLast24Hours, setCallsLast24Hours] = useState({});\n  const [trend24Hours, setTrend24Hours] = useState({});\n  const [trend30Days, setTrend30Days] = useState({});\n  const [entriesLast24Hours, setEntriesLast24Hours] = useState({}); // State to store entries count\n  const [gravityFormEntries, setGravityFormEntries] = useState([]); // State to store all Gravity Form entries\n\n  const fetchCallData = async () => {\n    try {\n      const allCallsData = {};\n\n      for (const companyId in COMPANY_MAPPING) {\n        const response = await axios.get(`http://localhost:3000/api/v1/call_rail_data?company_id=${companyId}`);\n        const calls = response.data;\n\n        // Filter calls from the last 30 days\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        \n        const recentCalls = calls.filter(call => new Date(call.start_time) >= thirtyDaysAgo);\n        allCallsData[companyId] = {\n          total: recentCalls.length,\n          calls: recentCalls\n        };\n\n        // Filter calls from the last 24 hours\n        const twentyFourHoursAgo = new Date();\n        twentyFourHoursAgo.setDate(twentyFourHoursAgo.getDate() - 1);\n\n        const recent24HourCalls = calls.filter(call => new Date(call.start_time) >= twentyFourHoursAgo);\n        setCallsLast24Hours(prev => ({ ...prev, [companyId]: recent24HourCalls.length }));\n\n        // Calculate trends\n        const previous30DaysAgo = new Date();\n        previous30DaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        const previous30DaysCalls = calls.filter(call => new Date(call.start_time) >= previous30DaysAgo && new Date(call.start_time) < thirtyDaysAgo);\n        const previous30DaysCount = previous30DaysCalls.length;\n        setTrend30Days(prev => ({ ...prev, [companyId]: recentCalls.length > previous30DaysCount ? 'up' : 'down' }));\n\n        const previous24HoursAgo = new Date();\n        previous24HoursAgo.setDate(twentyFourHoursAgo.getDate() - 1);\n        const previous24HoursCalls = calls.filter(call => new Date(call.start_time) >= previous24HoursAgo && new Date(call.start_time) < twentyFourHoursAgo);\n        const previous24HoursCount = previous24HoursCalls.length;\n        setTrend24Hours(prev => ({ ...prev, [companyId]: recent24HourCalls.length > previous24HoursCount ? 'up' : 'down' }));\n      }\n\n      setTotalCalls(allCallsData);\n    } catch (error) {\n      console.error('Error fetching the call data:', error);\n    }\n  };\n\n  const fetchGravityFormsData = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/api/v1/gravity_forms/entries');\n      const entries = response.data;\n\n      // Process entries to count the number of new chats for each company in the last 24 hours\n      const twentyFourHoursAgo = new Date();\n      twentyFourHoursAgo.setDate(twentyFourHoursAgo.getDate() - 1);\n\n      const newEntries = {};\n      entries.forEach(entry => {\n        const companyId = entry.company_id; // Ensure this matches the attribute name in your entries\n        if (new Date(entry.date_created) >= twentyFourHoursAgo) {\n          if (!newEntries[companyId]) {\n            newEntries[companyId] = 0;\n          }\n          newEntries[companyId]++;\n        }\n      });\n\n      setEntriesLast24Hours(newEntries);\n      setGravityFormEntries(entries); // Store all entries in state\n    } catch (error) {\n      console.error('Error fetching Gravity Forms data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchCallData();\n    fetchGravityFormsData();\n  }, []);\n\n  return (\n    <CompanyContext.Provider value={{ \n      COMPANY_MAPPING, \n      totalCalls, \n      callsLast24Hours,\n      trend24Hours,\n      trend30Days,\n      setTrend24Hours, \n      setTrend30Days,\n      entriesLast24Hours,\n      gravityFormEntries // Provide the entries to the context\n    }}>\n      {children}\n    </CompanyContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}